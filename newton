from sympy import *
def newton(f,df,x0,epsilon,max_iter):
    '''Approximate solution of f(x)=0 by Newton's method.

    Parameters
    ----------
    f : function
        Function for which we are searching for a solution f(x)=0.
    Df : function
        Derivative of f(x).
    x0 : number
        Initial guess for a solution f(x)=0.
    epsilon : number
        Stopping criteria is abs(f(x)) < epsilon.
    max_iter : integer
        Maximum number of iterations of Newton's method.

    Returns
    -------
    xn : number
        Implement Newton's method: compute the linear approximation
        of f(x) at xn and find x intercept by the formula
            x = xn - f(xn)/Df(xn)
        Continue until abs(f(xn)) < epsilon and return xn.
        If Df(xn) == 0, return None. If the number of iterations
        exceeds max_iter, then return None.

    Examples
    --------
    >>> f = lambda x: x**2 - x - 1
    >>> Df = lambda x: 2*x - 1
    >>> newton(f,Df,1,1e-8,10)
    Found solution after 5 iterations.
    1.618033988749989
    '''
    xn = x0
    for n in range(0,max_iter):
        fxn = f(xn)
        if abs(fxn) < epsilon:
            print('Found solution after',n,'iterations.')
            return None
        dfxn = df(xn)
        if dfxn == 0:
            print('Zero derivative. No solution found.')
            return None
        xn = xn - fxn/dfxn
    print('Exceeded maximum iterations. No solution found.')
    return None

#Tangentenbestimmung aus 2 Punkten
x1=0.8509
y1=0.2791
x2=0.7717
y2=1.5958
#y=m*x+b
m=(y2-y1)/(x2-x1)
print(m)
b=((y2)-(m*(x2)))
print(b)
function="{a:4.4f}*x + {d:4.4f}".format(a=m,d=b)
print('f(x)=' + function)
################################################################################
#Integral der Tangente
x= symbols('x')

df=function
f=integrate(df,(x)).evalf()

print("Stammfunktion: F(x) =", integrate(df, x))
print("Ableitung: f'(x) =", diff(f, x))


#Newtonverfahren
# f=-8.3125*x**2 + 14.4253*x
# df=-16.6250*x + 14.4253
newton=newton(f,df,1,1e-8,10)
print(newton)
